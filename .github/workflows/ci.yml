name: ci

on:
  push:
    branches:
      - "main" # Workflow läuft bei Push auf main

permissions:
  contents: read
  packages: write  # Für GHCR-Login & Push nötig

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}:latest # Ziel-Image-Name
  GOLANGCI_LINT_VERSION: v2.0.2 # Version des Linters
      
jobs:
  go-lint:
    name: Lint Go
    runs-on: ubuntu-latest # Läuft auf Ubuntu
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # Code auschecken

      - name: Install Go
        uses: actions/setup-go@v5 # Go installieren
        with:
          go-version: '1.24'

      - name: Download dependencies
        run: go mod download # Go-Module laden
        working-directory: src
        
      - name: Update Go dependencies
        run: go get -u ./... # Abhängigkeiten updaten
        working-directory: src

      - name: Run Lint Go
        uses: golangci/golangci-lint-action@v7 # Go-Code prüfen
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          working-directory: src

  docker-lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0 # Dockerfile statisch prüfen
        with:
          dockerfile: ./Dockerfile

  image-scan:
    name: Build & Scan Image with Trivy
    runs-on: ubuntu-latest
    needs: [go-lint, docker-lint]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3 # Buildx aktivieren
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64         # Nur eine Plattform erlaubt bei load
          load: true                     # Image lokal laden
          tags: sdxapp:test              # Muss mit Trivy-Scan übereinstimmen
      - uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: sdxapp:test
          format: table
          exit-code: 0
          severity: CRITICAL,HIGH

  integration-test:
    name: Run Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v4
      - run: docker compose up -d
      - run: sleep 10
      - run: python3 tests/test-recipe.py # Tests
      - if: always()
        run: docker compose down

  docker-push:
    name: Push to GHCR
    runs-on: ubuntu-latest
    needs: [image-scan, integration-test]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GHCR-Login
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.IMAGE_NAME }}
